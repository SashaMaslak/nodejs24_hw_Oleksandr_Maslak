on:
  push:
    branches:
      - main

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build --no-cache -t app:latest .

      - name: Tag Docker image
        run: docker tag app:latest ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_DIR }}:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_DIR }}:latest

  create-env:
    runs-on: ubuntu-latest
    needs: build
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Connect to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ENV_FILE=".env"
            NODE_ENV="${{ vars.NODE_ENV }}"
            PORT="${{ secrets.PORT }}"
            THROTTLE_LIMIT="${{ vars.THROTTLE_LIMIT }}"
            THROTTLE_TTL="${{ vars.THROTTLE_TTL }}"
            POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            POSTGRES_DB="${{ vars.POSTGRES_DB }}"
            POSTGRES_PORT="${{ vars.POSTGRES_PORT }}"
            POSTGRES_HOST="${{ vars.POSTGRES_HOST }}"
            MONGO_INITDB_ROOT_USERNAME="${{ secrets.MONGO_INITDB_ROOT_USERNAME }}"
            MONGO_INITDB_ROOT_PASSWORD="${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}"
            MONGO_EXPRESS_USERNAME="${{ secrets.MONGO_EXPRESS_USERNAME }}"
            MONGO_EXPRESS_PASSWORD="${{ secrets.MONGO_EXPRESS_PASSWORD }}"
            MONGO_URI="${{ secrets.MONGO_URI }}"

            if [ ! -f "$ENV_FILE" ]; then
              echo "Creating .env file..."
              touch "$ENV_FILE"
              echo "NODE_ENV=$NODE_ENV" >> "$ENV_FILE"
              echo "PORT=$PORT" >> "$ENV_FILE"
              echo "THROTTLE_LIMIT=$THROTTLE_LIMIT" >> "$ENV_FILE"
              echo "THROTTLE_TTL=$THROTTLE_TTL" >> "$ENV_FILE"
              echo "POSTGRES_USER=$POSTGRES_USER" >> "$ENV_FILE"
              echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> "$ENV_FILE"
              echo "POSTGRES_DB=$POSTGRES_DB" >> "$ENV_FILE"
              echo "POSTGRES_PORT=$POSTGRES_PORT" >> "$ENV_FILE"
              echo "POSTGRES_HOST=$POSTGRES_HOST" >> "$ENV_FILE"
              echo "MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME" >> "$ENV_FILE"
              echo "MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD" >> "$ENV_FILE"
              echo "MONGO_EXPRESS_USERNAME=$MONGO_EXPRESS_USERNAME" >> "$ENV_FILE"
              echo "MONGO_EXPRESS_PASSWORD=$MONGO_EXPRESS_PASSWORD" >> "$ENV_FILE"
              echo "MONGO_URI=$MONGO_URI" >> "$ENV_FILE"
              echo ".env file created successfully."
            else
              echo ".env file already exists."
            fi

  set-up-git-and-docker:
    runs-on: ubuntu-latest
    needs: create-env
    environment: dev

    steps:
      - name: Connect to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}

      - name: Install Git + Docker + Docker-Compose to EC2 instance if not installed
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker  # Для Amazon Linux
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            if ! command -v git &> /dev/null; then
              sudo yum install -y git  # Для Amazon Linux
            fi

            docker --version
            docker-compose --version
            git --version

  create-docker-compose-file:
    runs-on: ubuntu-latest
    needs: set-up-git-and-docker
    environment: dev

    steps:
      - name: Connect to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            DOCKER_COMPOSE_FILE="docker-compose.yml"

            if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
              echo "Creating $DOCKER_COMPOSE_FILE..."
              touch "$DOCKER_COMPOSE_FILE"
              echo "services:" > "$DOCKER_COMPOSE_FILE"
              echo "  app:" >> "$DOCKER_COMPOSE_FILE"
              echo "    image: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_DIR }}:latest" >> "$DOCKER_COMPOSE_FILE"
              echo "    container_name: app-container" >> "$DOCKER_COMPOSE_FILE"
              echo "    ports:" >> "$DOCKER_COMPOSE_FILE"
              echo "      - \"3100:3100\"" >> "$DOCKER_COMPOSE_FILE"
              echo "    env_file:" >> "$DOCKER_COMPOSE_FILE"
              echo "      - .env" >> "$DOCKER_COMPOSE_FILE"
              echo "    restart: unless-stopped" >> "$DOCKER_COMPOSE_FILE"
              echo "$DOCKER_COMPOSE_FILE created successfully."
            else
              echo "$DOCKER_COMPOSE_FILE already exists."
            fi

  run-image:
    runs-on: ubuntu-latest
    needs: create-docker-compose-file
    environment: dev

    steps:
      - name: Connect to EC2 instance and run commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker-compose down --volumes

            echo "Removing all Docker images..."
            sudo docker rmi $(sudo docker images -q) || echo "No images to remove."

            echo "Building the Docker images..."
            sudo docker-compose build --no-cache

            echo "Starting the app with Docker..."
            sudo docker-compose up -d

            echo "Listing running containers..."
            sudo docker ps
